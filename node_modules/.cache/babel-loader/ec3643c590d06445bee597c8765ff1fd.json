{"ast":null,"code":"import _objectSpread from\"C:\\\\webgis\\\\newfold\\\\dapp-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import _asyncToGenerator from\"C:\\\\webgis\\\\newfold\\\\dapp-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\webgis\\\\newfold\\\\dapp-project\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";/* eslint-disable react-hooks/exhaustive-deps */import{InboxOutlined}from\"@ant-design/icons\";import{message}from\"antd\";import Dragger from\"antd/lib/upload/Dragger\";import React,{useEffect,useMemo}from\"react\";import contractInfo from\"contracts/contractInfo.json\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ContractResolver(_ref){var contract=_ref.contract,setContract=_ref.setContract;useEffect(function(){/** Tries to load local contract JSON file or get\r\n     * it from browser localStorage(works only if file was uploaded previosly by drag&drop component) */if(contractInfo!==null&&contractInfo!==void 0&&contractInfo.name){setContract(contractInfo);}else if(window.localStorage.getItem(\"contract\"))setContract(JSON.parse(window.localStorage.getItem(\"contract\")));else message.error(\"No contract found. Upload it manually or deploy the contract again\");},[contractInfo]);// Props for drag and drop uploader\nvar uploadProps=useMemo(function(){return{name:\"file\",accept:\".JSON\",multiple:false,maxCount:1,fileList:contract!==null&&contract!==void 0&&contract.contractName?[{name:\"\".concat(contract===null||contract===void 0?void 0:contract.contractName,\".json\"),contract:contract}]:[],onChange:function onChange(info){var status=info.file.status;if(status!==\"uploading\"){console.log(info.file,info.fileList);}if(status===\"done\"){message.success(\"\".concat(info.file.name,\" file uploaded successfully.\"));}else if(status===\"error\"){message.error(\"\".concat(info.file.name,\" file upload failed.\"));}},onDrop:function onDrop(e){console.log(\"Dropped files\",e.dataTransfer.files);},onRemove:function onRemove(){setContract();window.localStorage.removeItem(\"contract\");},beforeUpload:function beforeUpload(file){function fileToJSON(_x){return _fileToJSON.apply(this,arguments);}function _fileToJSON(){_fileToJSON=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(file){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",new Promise(function(resolve,reject){var fileReader=new FileReader();fileReader.onload=function(event){return resolve(JSON.parse(event.target.result));};fileReader.onerror=function(error){return reject(error);};fileReader.readAsText(file);}));case 1:case\"end\":return _context.stop();}}},_callee);}));return _fileToJSON.apply(this,arguments);}fileToJSON(file).then(function(resolvedContract){window.localStorage.setItem(\"contract\",JSON.stringify(resolvedContract));setContract(resolvedContract);});return false;}};},[contract]);return/*#__PURE__*/_jsx(Dragger,_objectSpread(_objectSpread({},uploadProps),{},{children:!contract&&/*#__PURE__*/_jsxs(_Fragment,{children:[\" \",/*#__PURE__*/_jsx(\"p\",{className:\"ant-upload-drag-icon\",children:/*#__PURE__*/_jsx(InboxOutlined,{})}),/*#__PURE__*/_jsx(\"p\",{className:\"ant-upload-text\",children:\"Click or drag Contract file to this area to upload\"}),/*#__PURE__*/_jsx(\"p\",{className:\"ant-upload-hint\",children:\"Supports JSON Contract data generated by Truffle and HardHat. JSON File should contain ABI, address and contract name\"})]})}));}","map":{"version":3,"sources":["C:/webgis/newfold/dapp-project/src/components/Contract/ContractResolver.jsx"],"names":["InboxOutlined","message","Dragger","React","useEffect","useMemo","contractInfo","ContractResolver","contract","setContract","name","window","localStorage","getItem","JSON","parse","error","uploadProps","accept","multiple","maxCount","fileList","contractName","onChange","info","status","file","console","log","success","onDrop","e","dataTransfer","files","onRemove","removeItem","beforeUpload","fileToJSON","Promise","resolve","reject","fileReader","FileReader","onload","event","target","result","onerror","readAsText","then","resolvedContract","setItem","stringify"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { InboxOutlined } from \"@ant-design/icons\";\r\nimport { message } from \"antd\";\r\nimport Dragger from \"antd/lib/upload/Dragger\";\r\nimport React, { useEffect, useMemo } from \"react\";\r\nimport contractInfo from \"contracts/contractInfo.json\";\r\n\r\nexport default function ContractResolver({ contract, setContract }) {\r\n  useEffect(() => {\r\n    /** Tries to load local contract JSON file or get\r\n     * it from browser localStorage(works only if file was uploaded previosly by drag&drop component) */\r\n    if (contractInfo?.name) {\r\n      setContract(contractInfo);\r\n    } else if (window.localStorage.getItem(\"contract\"))\r\n      setContract(JSON.parse(window.localStorage.getItem(\"contract\")));\r\n    else\r\n      message.error(\r\n        \"No contract found. Upload it manually or deploy the contract again\",\r\n      );\r\n  }, [contractInfo]);\r\n\r\n  // Props for drag and drop uploader\r\n  const uploadProps = useMemo(() => {\r\n    return {\r\n      name: \"file\",\r\n      accept: \".JSON\",\r\n      multiple: false,\r\n      maxCount: 1,\r\n      fileList: contract?.contractName\r\n        ? [{ name: `${contract?.contractName}.json`, contract }]\r\n        : [],\r\n      onChange(info) {\r\n        const { status } = info.file;\r\n        if (status !== \"uploading\") {\r\n          console.log(info.file, info.fileList);\r\n        }\r\n        if (status === \"done\") {\r\n          message.success(`${info.file.name} file uploaded successfully.`);\r\n        } else if (status === \"error\") {\r\n          message.error(`${info.file.name} file upload failed.`);\r\n        }\r\n      },\r\n      onDrop(e) {\r\n        console.log(\"Dropped files\", e.dataTransfer.files);\r\n      },\r\n      onRemove() {\r\n        setContract();\r\n        window.localStorage.removeItem(\"contract\");\r\n      },\r\n      beforeUpload: (file) => {\r\n        async function fileToJSON(file) {\r\n          return new Promise((resolve, reject) => {\r\n            const fileReader = new FileReader();\r\n            fileReader.onload = (event) =>\r\n              resolve(JSON.parse(event.target.result));\r\n            fileReader.onerror = (error) => reject(error);\r\n            fileReader.readAsText(file);\r\n          });\r\n        }\r\n        fileToJSON(file).then((resolvedContract) => {\r\n          window.localStorage.setItem(\r\n            \"contract\",\r\n            JSON.stringify(resolvedContract),\r\n          );\r\n          setContract(resolvedContract);\r\n        });\r\n        return false;\r\n      },\r\n    };\r\n  }, [contract]);\r\n\r\n  return (\r\n    <Dragger {...uploadProps}>\r\n      {!contract && (\r\n        <>\r\n          {\" \"}\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <InboxOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">\r\n            Click or drag Contract file to this area to upload\r\n          </p>\r\n          <p className=\"ant-upload-hint\">\r\n            Supports JSON Contract data generated by Truffle and HardHat. JSON\r\n            File should contain ABI, address and contract name\r\n          </p>\r\n        </>\r\n      )}\r\n    </Dragger>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}