{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useMoralis } from \"react-moralis\";\n\nconst useInchDex = chain => {\n  _s();\n\n  const {\n    Moralis,\n    account\n  } = useMoralis();\n  const [tokenList, setTokenlist] = useState();\n  useEffect(() => {\n    var _Moralis$Plugins;\n\n    if (!(Moralis !== null && Moralis !== void 0 && (_Moralis$Plugins = Moralis[\"Plugins\"]) !== null && _Moralis$Plugins !== void 0 && _Moralis$Plugins[\"oneInch\"])) return null;\n    Moralis.Plugins.oneInch.getSupportedTokens({\n      chain\n    }).then(tokens => setTokenlist(tokens.tokens));\n  }, [Moralis, Moralis.Plugins, chain]);\n\n  const getQuote = async params => await Moralis.Plugins.oneInch.quote({\n    chain: params.chain,\n    // The blockchain  you want to use (eth/bsc/polygon)\n    fromTokenAddress: params.fromToken.address,\n    // The token you want to swap\n    toTokenAddress: params.toToken.address,\n    // The token you want to receive\n    amount: Moralis.Units.Token(params.fromAmount, params.fromToken.decimals).toString()\n  });\n\n  async function trySwap(params) {\n    const {\n      fromToken,\n      fromAmount,\n      chain\n    } = params;\n    const amount = Moralis.Units.Token(fromAmount, fromToken.decimals).toString();\n\n    if (fromToken.address !== \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\") {\n      await Moralis.Plugins.oneInch.hasAllowance({\n        chain,\n        // The blockchain you want to use (eth/bsc/polygon)\n        fromTokenAddress: fromToken.address,\n        // The token you want to swap\n        fromAddress: account,\n        // Your wallet address\n        amount\n      }).then(async allowance => {\n        console.log(allowance);\n\n        if (!allowance) {\n          await Moralis.Plugins.oneInch.approve({\n            chain,\n            // The blockchain you want to use (eth/bsc/polygon)\n            tokenAddress: fromToken.address,\n            // The token you want to swap\n            fromAddress: account // Your wallet address\n\n          });\n        }\n      }).catch(e => alert(e.message));\n    }\n\n    await doSwap(params).then(receipt => {\n      if (receipt.statusCode !== 400) {\n        alert(\"Swap Complete\");\n      }\n\n      console.log(receipt);\n    }).catch(e => alert(e.message));\n  }\n\n  async function doSwap(params) {\n    return await Moralis.Plugins.oneInch.swap({\n      chain: params.chain,\n      // The blockchain you want to use (eth/bsc/polygon)\n      fromTokenAddress: params.fromToken.address,\n      // The token you want to swap\n      toTokenAddress: params.toToken.address,\n      // The token you want to receive\n      amount: Moralis.Units.Token(params.fromAmount, params.fromToken.decimals).toString(),\n      fromAddress: account,\n      // Your wallet address\n      slippage: 1\n    });\n  }\n\n  return {\n    getQuote,\n    trySwap,\n    tokenList\n  };\n};\n\n_s(useInchDex, \"ayvi7Boh5egTptp7Mba8d+K9QE8=\", false, function () {\n  return [useMoralis];\n});\n\nexport default useInchDex;","map":{"version":3,"sources":["C:/webgis/newfold/ethereum-boilerplate/src/hooks/useInchDex.js"],"names":["useEffect","useState","useMoralis","useInchDex","chain","Moralis","account","tokenList","setTokenlist","Plugins","oneInch","getSupportedTokens","then","tokens","getQuote","params","quote","fromTokenAddress","fromToken","address","toTokenAddress","toToken","amount","Units","Token","fromAmount","decimals","toString","trySwap","hasAllowance","fromAddress","allowance","console","log","approve","tokenAddress","catch","e","alert","message","doSwap","receipt","statusCode","swap","slippage"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,eAA3B;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBJ,UAAU,EAAvC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,EAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,QAAI,EAACK,OAAD,aAACA,OAAD,mCAACA,OAAO,CAAG,SAAH,CAAR,6CAAC,iBAAuB,SAAvB,CAAD,CAAJ,EAAwC,OAAO,IAAP;AACxCA,IAAAA,OAAO,CAACI,OAAR,CAAgBC,OAAhB,CACGC,kBADH,CACsB;AAAEP,MAAAA;AAAF,KADtB,EAEGQ,IAFH,CAESC,MAAD,IAAYL,YAAY,CAACK,MAAM,CAACA,MAAR,CAFhC;AAGD,GALQ,EAKN,CAACR,OAAD,EAAUA,OAAO,CAACI,OAAlB,EAA2BL,KAA3B,CALM,CAAT;;AAOA,QAAMU,QAAQ,GAAG,MAAOC,MAAP,IACf,MAAMV,OAAO,CAACI,OAAR,CAAgBC,OAAhB,CAAwBM,KAAxB,CAA8B;AAClCZ,IAAAA,KAAK,EAAEW,MAAM,CAACX,KADoB;AACb;AACrBa,IAAAA,gBAAgB,EAAEF,MAAM,CAACG,SAAP,CAAiBC,OAFD;AAEU;AAC5CC,IAAAA,cAAc,EAAEL,MAAM,CAACM,OAAP,CAAeF,OAHG;AAGM;AACxCG,IAAAA,MAAM,EAAEjB,OAAO,CAACkB,KAAR,CAAcC,KAAd,CACNT,MAAM,CAACU,UADD,EAENV,MAAM,CAACG,SAAP,CAAiBQ,QAFX,EAGNC,QAHM;AAJ0B,GAA9B,CADR;;AAWA,iBAAeC,OAAf,CAAuBb,MAAvB,EAA+B;AAC7B,UAAM;AAAEG,MAAAA,SAAF;AAAaO,MAAAA,UAAb;AAAyBrB,MAAAA;AAAzB,QAAmCW,MAAzC;AACA,UAAMO,MAAM,GAAGjB,OAAO,CAACkB,KAAR,CAAcC,KAAd,CACbC,UADa,EAEbP,SAAS,CAACQ,QAFG,EAGbC,QAHa,EAAf;;AAIA,QAAIT,SAAS,CAACC,OAAV,KAAsB,4CAA1B,EAAwE;AACtE,YAAMd,OAAO,CAACI,OAAR,CAAgBC,OAAhB,CACHmB,YADG,CACU;AACZzB,QAAAA,KADY;AACL;AACPa,QAAAA,gBAAgB,EAAEC,SAAS,CAACC,OAFhB;AAEyB;AACrCW,QAAAA,WAAW,EAAExB,OAHD;AAGU;AACtBgB,QAAAA;AAJY,OADV,EAOHV,IAPG,CAOE,MAAOmB,SAAP,IAAqB;AACzBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;;AACA,YAAI,CAACA,SAAL,EAAgB;AACd,gBAAM1B,OAAO,CAACI,OAAR,CAAgBC,OAAhB,CAAwBwB,OAAxB,CAAgC;AACpC9B,YAAAA,KADoC;AAC7B;AACP+B,YAAAA,YAAY,EAAEjB,SAAS,CAACC,OAFY;AAEH;AACjCW,YAAAA,WAAW,EAAExB,OAHuB,CAGd;;AAHc,WAAhC,CAAN;AAKD;AACF,OAhBG,EAiBH8B,KAjBG,CAiBIC,CAAD,IAAOC,KAAK,CAACD,CAAC,CAACE,OAAH,CAjBf,CAAN;AAkBD;;AAED,UAAMC,MAAM,CAACzB,MAAD,CAAN,CACHH,IADG,CACG6B,OAAD,IAAa;AACjB,UAAIA,OAAO,CAACC,UAAR,KAAuB,GAA3B,EAAgC;AAC9BJ,QAAAA,KAAK,CAAC,eAAD,CAAL;AACD;;AACDN,MAAAA,OAAO,CAACC,GAAR,CAAYQ,OAAZ;AACD,KANG,EAOHL,KAPG,CAOIC,CAAD,IAAOC,KAAK,CAACD,CAAC,CAACE,OAAH,CAPf,CAAN;AAQD;;AAED,iBAAeC,MAAf,CAAsBzB,MAAtB,EAA8B;AAC5B,WAAO,MAAMV,OAAO,CAACI,OAAR,CAAgBC,OAAhB,CAAwBiC,IAAxB,CAA6B;AACxCvC,MAAAA,KAAK,EAAEW,MAAM,CAACX,KAD0B;AACnB;AACrBa,MAAAA,gBAAgB,EAAEF,MAAM,CAACG,SAAP,CAAiBC,OAFK;AAEI;AAC5CC,MAAAA,cAAc,EAAEL,MAAM,CAACM,OAAP,CAAeF,OAHS;AAGA;AACxCG,MAAAA,MAAM,EAAEjB,OAAO,CAACkB,KAAR,CAAcC,KAAd,CACNT,MAAM,CAACU,UADD,EAENV,MAAM,CAACG,SAAP,CAAiBQ,QAFX,EAGNC,QAHM,EAJgC;AAQxCG,MAAAA,WAAW,EAAExB,OAR2B;AAQlB;AACtBsC,MAAAA,QAAQ,EAAE;AAT8B,KAA7B,CAAb;AAWD;;AAED,SAAO;AAAE9B,IAAAA,QAAF;AAAYc,IAAAA,OAAZ;AAAqBrB,IAAAA;AAArB,GAAP;AACD,CA1ED;;GAAMJ,U;UACyBD,U;;;AA2E/B,eAAeC,UAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useMoralis } from \"react-moralis\";\r\n\r\nconst useInchDex = (chain) => {\r\n  const { Moralis, account } = useMoralis();\r\n  const [tokenList, setTokenlist] = useState();\r\n\r\n  useEffect(() => {\r\n    if (!Moralis?.[\"Plugins\"]?.[\"oneInch\"]) return null;\r\n    Moralis.Plugins.oneInch\r\n      .getSupportedTokens({ chain })\r\n      .then((tokens) => setTokenlist(tokens.tokens));\r\n  }, [Moralis, Moralis.Plugins, chain]);\r\n\r\n  const getQuote = async (params) =>\r\n    await Moralis.Plugins.oneInch.quote({\r\n      chain: params.chain, // The blockchain  you want to use (eth/bsc/polygon)\r\n      fromTokenAddress: params.fromToken.address, // The token you want to swap\r\n      toTokenAddress: params.toToken.address, // The token you want to receive\r\n      amount: Moralis.Units.Token(\r\n        params.fromAmount,\r\n        params.fromToken.decimals,\r\n      ).toString(),\r\n    });\r\n\r\n  async function trySwap(params) {\r\n    const { fromToken, fromAmount, chain } = params;\r\n    const amount = Moralis.Units.Token(\r\n      fromAmount,\r\n      fromToken.decimals,\r\n    ).toString();\r\n    if (fromToken.address !== \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\") {\r\n      await Moralis.Plugins.oneInch\r\n        .hasAllowance({\r\n          chain, // The blockchain you want to use (eth/bsc/polygon)\r\n          fromTokenAddress: fromToken.address, // The token you want to swap\r\n          fromAddress: account, // Your wallet address\r\n          amount,\r\n        })\r\n        .then(async (allowance) => {\r\n          console.log(allowance);\r\n          if (!allowance) {\r\n            await Moralis.Plugins.oneInch.approve({\r\n              chain, // The blockchain you want to use (eth/bsc/polygon)\r\n              tokenAddress: fromToken.address, // The token you want to swap\r\n              fromAddress: account, // Your wallet address\r\n            });\r\n          }\r\n        })\r\n        .catch((e) => alert(e.message));\r\n    }\r\n\r\n    await doSwap(params)\r\n      .then((receipt) => {\r\n        if (receipt.statusCode !== 400) {\r\n          alert(\"Swap Complete\");\r\n        }\r\n        console.log(receipt);\r\n      })\r\n      .catch((e) => alert(e.message));\r\n  }\r\n\r\n  async function doSwap(params) {\r\n    return await Moralis.Plugins.oneInch.swap({\r\n      chain: params.chain, // The blockchain you want to use (eth/bsc/polygon)\r\n      fromTokenAddress: params.fromToken.address, // The token you want to swap\r\n      toTokenAddress: params.toToken.address, // The token you want to receive\r\n      amount: Moralis.Units.Token(\r\n        params.fromAmount,\r\n        params.fromToken.decimals,\r\n      ).toString(),\r\n      fromAddress: account, // Your wallet address\r\n      slippage: 1,\r\n    });\r\n  }\r\n\r\n  return { getQuote, trySwap, tokenList };\r\n};\r\n\r\nexport default useInchDex;\r\n"]},"metadata":{},"sourceType":"module"}