{"ast":null,"code":"var _jsxFileName = \"C:\\\\webgis\\\\newfold\\\\ethereum-boilerplate\\\\src\\\\components\\\\Contract\\\\Contract.jsx\",\n    _s = $RefreshSig$();\n\nimport { Card, Form, notification } from \"antd\";\nimport { useMemo, useState } from \"react\";\nimport Address from \"components/Address/Address\";\nimport { useMoralis, useMoralisQuery } from \"react-moralis\";\nimport { getEllipsisTxt } from \"helpers/formatters\";\nimport ContractMethods from \"./ContractMethods\";\nimport ContractResolver from \"./ContractResolver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Contract() {\n  _s();\n\n  const {\n    Moralis,\n    chainId\n  } = useMoralis();\n  const [responses, setResponses] = useState({});\n  const [contract, setContract] = useState();\n  /**Moralis Live query for displaying contract's events*/\n\n  const {\n    data\n  } = useMoralisQuery(\"Events\", query => query, [], {\n    live: true\n  });\n  /** Automatically builds write and read components for interacting with contract*/\n\n  const displayedContractFunctions = useMemo(() => {\n    if (!(contract !== null && contract !== void 0 && contract.abi)) return [];\n    return contract.abi.filter(method => method[\"type\"] === \"function\");\n  }, [contract]);\n  /** Returns true in case if contract is deployed to active chain in wallet */\n\n  const isDeployedToActiveChain = useMemo(() => {\n    if (!(contract !== null && contract !== void 0 && contract.networks)) return undefined;\n    return [parseInt(chainId, 16)] in contract.networks;\n  }, [contract, chainId]);\n  const contractAddress = useMemo(() => {\n    var _contract$networks$pa;\n\n    if (!isDeployedToActiveChain) return null;\n    return ((_contract$networks$pa = contract.networks[parseInt(chainId, 16)]) === null || _contract$networks$pa === void 0 ? void 0 : _contract$networks$pa[\"address\"]) || null;\n  }, [chainId, contract, isDeployedToActiveChain]);\n  /** Default function for showing notifications*/\n\n  const openNotification = _ref => {\n    let {\n      message,\n      description\n    } = _ref;\n    notification.open({\n      placement: \"bottomRight\",\n      message,\n      description\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"auto\",\n      display: \"flex\",\n      gap: \"20px\",\n      marginTop: \"25\",\n      width: \"70vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\"\n        },\n        children: [\"Your contract: \", contract === null || contract === void 0 ? void 0 : contract.contractName, /*#__PURE__*/_jsxDEV(Address, {\n          avatar: \"left\",\n          copyable: true,\n          address: contractAddress,\n          size: 8\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this),\n      size: \"large\",\n      style: {\n        width: \"60%\",\n        boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\n        border: \"1px solid #e7eaf3\",\n        borderRadius: \"0.5rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(ContractResolver, {\n        setContract: setContract,\n        contract: contract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), isDeployedToActiveChain === true && /*#__PURE__*/_jsxDEV(Form.Provider, {\n        onFormFinish: async (name, _ref2) => {\n          let {\n            forms\n          } = _ref2;\n          const params = forms[name].getFieldsValue();\n          let isView = false;\n\n          for (let method of contract === null || contract === void 0 ? void 0 : contract.abi) {\n            if (method.name !== name) continue;\n            console.log(method);\n            if (method.stateMutability === \"view\") isView = true;\n          }\n\n          const options = {\n            contractAddress,\n            functionName: name,\n            abi: contract === null || contract === void 0 ? void 0 : contract.abi,\n            params\n          };\n\n          if (!isView) {\n            const tx = await Moralis.executeFunction({\n              awaitReceipt: false,\n              ...options\n            });\n            tx.on(\"transactionHash\", hash => {\n              setResponses({ ...responses,\n                [name]: {\n                  result: null,\n                  isLoading: true\n                }\n              });\n              openNotification({\n                message: \"ðŸ”Š New Transaction\",\n                description: `${hash}`\n              });\n              console.log(\"ðŸ”Š New Transaction\", hash);\n            }).on(\"receipt\", receipt => {\n              setResponses({ ...responses,\n                [name]: {\n                  result: null,\n                  isLoading: false\n                }\n              });\n              openNotification({\n                message: \"ðŸ“ƒ New Receipt\",\n                description: `${receipt.transactionHash}`\n              });\n              console.log(\"ðŸ”Š New Receipt: \", receipt);\n            }).on(\"error\", error => {\n              console.error(error);\n            });\n          } else {\n            console.log(\"options22\", options);\n            Moralis.executeFunction(options).then(response => setResponses({ ...responses,\n              [name]: {\n                result: response,\n                isLoading: false\n              }\n            }));\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(ContractMethods, {\n          displayedContractFunctions: displayedContractFunctions,\n          responses: responses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), isDeployedToActiveChain === false && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: `The contract is not deployed to the active ${chainId} chain. Switch your active chain or try agan later.`\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Contract Events\",\n      size: \"large\",\n      style: {\n        width: \"40%\",\n        boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\n        border: \"1px solid #e7eaf3\",\n        borderRadius: \"0.5rem\"\n      },\n      children: data.map((event, key) => /*#__PURE__*/_jsxDEV(Card, {\n        title: \"Transfer event\",\n        size: \"small\",\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: getEllipsisTxt(event.attributes.transaction_hash, 14)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Contract, \"ARmUf/PU2mmfQG3iNuZbvgAbrRk=\", false, function () {\n  return [useMoralis, useMoralisQuery];\n});\n\n_c = Contract;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contract\");","map":{"version":3,"sources":["C:/webgis/newfold/ethereum-boilerplate/src/components/Contract/Contract.jsx"],"names":["Card","Form","notification","useMemo","useState","Address","useMoralis","useMoralisQuery","getEllipsisTxt","ContractMethods","ContractResolver","Contract","Moralis","chainId","responses","setResponses","contract","setContract","data","query","live","displayedContractFunctions","abi","filter","method","isDeployedToActiveChain","networks","undefined","parseInt","contractAddress","openNotification","message","description","open","placement","margin","display","gap","marginTop","width","justifyContent","alignItems","contractName","boxShadow","border","borderRadius","name","forms","params","getFieldsValue","isView","console","log","stateMutability","options","functionName","tx","executeFunction","awaitReceipt","on","hash","result","isLoading","receipt","transactionHash","error","then","response","map","event","key","marginBottom","attributes","transaction_hash"],"mappings":"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","sourcesContent":["import { Card, Form, notification } from \"antd\";\r\nimport { useMemo, useState } from \"react\";\r\nimport Address from \"components/Address/Address\";\r\nimport { useMoralis, useMoralisQuery } from \"react-moralis\";\r\nimport { getEllipsisTxt } from \"helpers/formatters\";\r\nimport ContractMethods from \"./ContractMethods\";\r\nimport ContractResolver from \"./ContractResolver\";\r\n\r\nexport default function Contract() {\r\n  const { Moralis, chainId } = useMoralis();\r\n  const [responses, setResponses] = useState({});\r\n  const [contract, setContract] = useState();\r\n\r\n  /**Moralis Live query for displaying contract's events*/\r\n  const { data } = useMoralisQuery(\"Events\", (query) => query, [], {\r\n    live: true,\r\n  });\r\n\r\n  /** Automatically builds write and read components for interacting with contract*/\r\n  const displayedContractFunctions = useMemo(() => {\r\n    if (!contract?.abi) return [];\r\n    return contract.abi.filter((method) => method[\"type\"] === \"function\");\r\n  }, [contract]);\r\n\r\n  /** Returns true in case if contract is deployed to active chain in wallet */\r\n  const isDeployedToActiveChain = useMemo(() => {\r\n    if (!contract?.networks) return undefined;\r\n    return [parseInt(chainId, 16)] in contract.networks;\r\n  }, [contract, chainId]);\r\n\r\n  const contractAddress = useMemo(() => {\r\n    if (!isDeployedToActiveChain) return null;\r\n    return contract.networks[parseInt(chainId, 16)]?.[\"address\"] || null;\r\n  }, [chainId, contract, isDeployedToActiveChain]);\r\n\r\n  /** Default function for showing notifications*/\r\n  const openNotification = ({ message, description }) => {\r\n    notification.open({\r\n      placement: \"bottomRight\",\r\n      message,\r\n      description,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: \"auto\",\r\n        display: \"flex\",\r\n        gap: \"20px\",\r\n        marginTop: \"25\",\r\n        width: \"70vw\",\r\n      }}\r\n    >\r\n      <Card\r\n        title={\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            Your contract: {contract?.contractName}\r\n            <Address\r\n              avatar=\"left\"\r\n              copyable\r\n              address={contractAddress}\r\n              size={8}\r\n            />\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{\r\n          width: \"60%\",\r\n          boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\r\n          border: \"1px solid #e7eaf3\",\r\n          borderRadius: \"0.5rem\",\r\n        }}\r\n      >\r\n        <ContractResolver setContract={setContract} contract={contract} />\r\n\r\n        {isDeployedToActiveChain === true && (\r\n          <Form.Provider\r\n            onFormFinish={async (name, { forms }) => {\r\n              const params = forms[name].getFieldsValue();\r\n\r\n              let isView = false;\r\n\r\n              for (let method of contract?.abi) {\r\n                if (method.name !== name) continue;\r\n                console.log(method);\r\n                if (method.stateMutability === \"view\") isView = true;\r\n              }\r\n\r\n              const options = {\r\n                contractAddress,\r\n                functionName: name,\r\n                abi: contract?.abi,\r\n                params,\r\n              };\r\n\r\n              if (!isView) {\r\n                const tx = await Moralis.executeFunction({\r\n                  awaitReceipt: false,\r\n                  ...options,\r\n                });\r\n                tx.on(\"transactionHash\", (hash) => {\r\n                  setResponses({\r\n                    ...responses,\r\n                    [name]: { result: null, isLoading: true },\r\n                  });\r\n                  openNotification({\r\n                    message: \"ðŸ”Š New Transaction\",\r\n                    description: `${hash}`,\r\n                  });\r\n                  console.log(\"ðŸ”Š New Transaction\", hash);\r\n                })\r\n                  .on(\"receipt\", (receipt) => {\r\n                    setResponses({\r\n                      ...responses,\r\n                      [name]: { result: null, isLoading: false },\r\n                    });\r\n                    openNotification({\r\n                      message: \"ðŸ“ƒ New Receipt\",\r\n                      description: `${receipt.transactionHash}`,\r\n                    });\r\n                    console.log(\"ðŸ”Š New Receipt: \", receipt);\r\n                  })\r\n                  .on(\"error\", (error) => {\r\n                    console.error(error);\r\n                  });\r\n              } else {\r\n                console.log(\"options22\", options);\r\n                Moralis.executeFunction(options).then((response) =>\r\n                  setResponses({\r\n                    ...responses,\r\n                    [name]: { result: response, isLoading: false },\r\n                  }),\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            <ContractMethods\r\n              displayedContractFunctions={displayedContractFunctions}\r\n              responses={responses}\r\n            />\r\n          </Form.Provider>\r\n        )}\r\n        {isDeployedToActiveChain === false && (\r\n          <>{`The contract is not deployed to the active ${chainId} chain. Switch your active chain or try agan later.`}</>\r\n        )}\r\n      </Card>\r\n      <Card\r\n        title={\"Contract Events\"}\r\n        size=\"large\"\r\n        style={{\r\n          width: \"40%\",\r\n          boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\r\n          border: \"1px solid #e7eaf3\",\r\n          borderRadius: \"0.5rem\",\r\n        }}\r\n      >\r\n        {data.map((event, key) => (\r\n          <Card\r\n            title={\"Transfer event\"}\r\n            size=\"small\"\r\n            style={{ marginBottom: \"20px\" }}\r\n            key={key}\r\n          >\r\n            {getEllipsisTxt(event.attributes.transaction_hash, 14)}\r\n          </Card>\r\n        ))}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}