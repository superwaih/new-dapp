{"ast":null,"code":"import _objectSpread from\"C:\\\\webgis\\\\newfold\\\\dapp-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import _slicedToArray from\"C:\\\\webgis\\\\newfold\\\\dapp-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import{useEffect}from\"react\";import{useState}from\"react\";import{getEllipsisTxt}from\"../../helpers/formatters\";import Blockie from\"../Blockie\";import\"./identicon.css\";import{useMoralis}from\"react-moralis\";import{Skeleton}from\"antd\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var styles={address:{height:\"36px\",display:\"flex\",gap:\"5px\",backgroundColor:\"rgba(255, 255, 255, 0.1)\",borderRadius:\"9px\",alignItems:\"center\"}};function Address(props){var _useMoralis=useMoralis(),account=_useMoralis.account,isAuthenticated=_useMoralis.isAuthenticated;var _useState=useState(),_useState2=_slicedToArray(_useState,2),address=_useState2[0],setAddress=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isClicked=_useState4[0],setIsClicked=_useState4[1];useEffect(function(){setAddress((props===null||props===void 0?void 0:props.address)||isAuthenticated&&account);},[account,isAuthenticated,props]);if(!address)return/*#__PURE__*/_jsx(Skeleton,{paragraph:{rows:1,width:\"100%\"},title:false,active:true});var Copy=function Copy(){return/*#__PURE__*/_jsxs(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"26\",height:\"26\",viewBox:\"0 0 24 24\",strokeWidth:\"2\",stroke:\"#1780FF\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",style:{cursor:\"pointer\"},onClick:function onClick(){navigator.clipboard.writeText(address);setIsClicked(true);},children:[/*#__PURE__*/_jsx(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M15 3v4a1 1 0 0 0 1 1h4\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M18 17h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h4l5 5v7a2 2 0 0 1 -2 2z\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M16 17v2a2 2 0 0 1 -2 2h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h2\"}),/*#__PURE__*/_jsx(\"title\",{id:\"copy-address\",children:\"Copy Address\"})]});};return/*#__PURE__*/_jsxs(\"div\",{style:_objectSpread(_objectSpread({},styles.address),props.style),children:[props.avatar===\"left\"&&/*#__PURE__*/_jsx(Blockie,{address:address,size:7}),/*#__PURE__*/_jsx(\"p\",{children:props.size?getEllipsisTxt(address,props.size):address}),props.avatar===\"right\"&&/*#__PURE__*/_jsx(Blockie,{address:address,size:7}),props.copyable&&(isClicked?/*#__PURE__*/_jsx(Check,{}):/*#__PURE__*/_jsx(Copy,{}))]});}export default Address;var Check=function Check(){return/*#__PURE__*/_jsxs(\"svg\",{width:\"24\",height:\"24\",viewBox:\"0 0 24 24\",strokeWidth:\"3\",stroke:\"#21BF96\",fill:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",children:[/*#__PURE__*/_jsx(\"path\",{stroke:\"none\",d:\"M0 0h24v24H0z\",fill:\"none\"}),/*#__PURE__*/_jsx(\"path\",{d:\"M5 12l5 5l10 -10\"}),/*#__PURE__*/_jsx(\"title\",{id:\"copied-address\",children:\"Copied!\"})]});};","map":{"version":3,"sources":["C:/webgis/newfold/dapp-project/src/components/Address/Address.jsx"],"names":["useEffect","useState","getEllipsisTxt","Blockie","useMoralis","Skeleton","styles","address","height","display","gap","backgroundColor","borderRadius","alignItems","Address","props","account","isAuthenticated","setAddress","isClicked","setIsClicked","rows","width","Copy","cursor","navigator","clipboard","writeText","style","avatar","size","copyable","Check"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { getEllipsisTxt } from \"../../helpers/formatters\";\r\nimport Blockie from \"../Blockie\";\r\nimport \"./identicon.css\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport { Skeleton } from \"antd\";\r\n\r\nconst styles = {\r\n  address: {\r\n    height: \"36px\",\r\n    display: \"flex\",\r\n    gap: \"5px\",\r\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\r\n    borderRadius: \"9px\",\r\n    alignItems: \"center\",\r\n  },\r\n};\r\n\r\nfunction Address(props) {\r\n  const { account, isAuthenticated } = useMoralis();\r\n  const [address, setAddress] = useState();\r\n  const [isClicked, setIsClicked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setAddress(props?.address || (isAuthenticated && account));\r\n  }, [account, isAuthenticated, props]);\r\n\r\n  if (!address)\r\n    return (\r\n      <Skeleton paragraph={{ rows: 1, width: \"100%\" }} title={false} active />\r\n    );\r\n\r\n  const Copy = () => (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"26\"\r\n      height=\"26\"\r\n      viewBox=\"0 0 24 24\"\r\n      strokeWidth=\"2\"\r\n      stroke=\"#1780FF\"\r\n      fill=\"none\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      style={{ cursor: \"pointer\" }}\r\n      onClick={() => {\r\n        navigator.clipboard.writeText(address);\r\n        setIsClicked(true);\r\n      }}\r\n    >\r\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n      <path d=\"M15 3v4a1 1 0 0 0 1 1h4\" />\r\n      <path d=\"M18 17h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h4l5 5v7a2 2 0 0 1 -2 2z\" />\r\n      <path d=\"M16 17v2a2 2 0 0 1 -2 2h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h2\" />\r\n      <title id=\"copy-address\">Copy Address</title>\r\n    </svg>\r\n  );\r\n\r\n  return (\r\n    <div style={{ ...styles.address, ...props.style }}>\r\n      {props.avatar === \"left\" && <Blockie address={address} size={7} />}\r\n      <p>{props.size ? getEllipsisTxt(address, props.size) : address}</p>\r\n      {props.avatar === \"right\" && <Blockie address={address} size={7} />}\r\n      {props.copyable && (isClicked ? <Check /> : <Copy />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Address;\r\n\r\nconst Check = () => (\r\n  <svg\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    strokeWidth=\"3\"\r\n    stroke=\"#21BF96\"\r\n    fill=\"none\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n    <path d=\"M5 12l5 5l10 -10\" />\r\n    <title id=\"copied-address\">Copied!</title>\r\n  </svg>\r\n);\r\n"]},"metadata":{},"sourceType":"module"}