{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useIPFS } from \"./useIPFS\";\n/**\r\n * This is a hook that loads the NFT metadata in case it doesn't alreay exist\r\n * If metadata is missing, the object is replaced with a reactive object that updatees when the data becomes available\r\n * The hook will retry until request is successful (with OpenSea, for now)\r\n */\n\nexport const useVerifyMetadata = () => {\n  _s();\n\n  const {\n    resolveLink\n  } = useIPFS();\n  const [results, setResults] = useState({});\n  /**\r\n   * Fet Metadata  from NFT and Cache Results\r\n   * @param {object} NFT\r\n   * @returns NFT\r\n   */\n\n  function verifyMetadata(NFT) {\n    //Pass Through if Metadata already present\n    if (NFT.metadata) return NFT; //Get the Metadata\n\n    getMetadata(NFT); //Return Hooked NFT Object\n\n    return results !== null && results !== void 0 && results[NFT.token_uri] ? results === null || results === void 0 ? void 0 : results[NFT.token_uri] : NFT;\n  } //verifyMetadata()\n\n  /**\r\n   * Extract Metadata from NFT,\r\n   *  Fallback: Fetch from URI\r\n   * @param {object} NFT\r\n   * @returns void\r\n   */\n\n\n  async function getMetadata(NFT) {\n    //Validate URI\n    if (!NFT.token_uri || !NFT.token_uri.includes(\"://\")) {\n      console.log(\"getMetadata() Invalid URI\", {\n        URI: NFT.token_uri,\n        NFT\n      });\n      return;\n    } //Get Metadata\n\n\n    fetch(NFT.token_uri).then(res => res.json()).then(metadata => {\n      if (!metadata) {\n        //Log\n        console.error(\"useVerifyMetadata.getMetadata() No Metadata found on URI:\", {\n          URI: NFT.token_uri,\n          NFT\n        });\n      } //Handle Setbacks\n      else if (metadata !== null && metadata !== void 0 && metadata.detail && metadata.detail.includes(\"Request was throttled\")) {\n        //Log\n        console.warn(\"useVerifyMetadata.getMetadata() Bad Result for:\" + NFT.token_uri + \"  Will retry later\", {\n          results,\n          metadata\n        }); //Retry That Again after 1s\n\n        setTimeout(function () {\n          getMetadata(NFT);\n        }, 1000);\n      } //Handle Opensea's {detail: \"Request was throttled. Expected available in 1 second.\"}\n      else {\n        //No Errors\n        //Set\n        setMetadata(NFT, metadata); //Log\n\n        console.log(\"getMetadata() Late-load for NFT Metadata \" + NFT.token_uri, {\n          metadata\n        });\n      } //Valid Result\n\n    }).catch(err => {\n      console.error(\"useVerifyMetadata.getMetadata() Error Caught:\", {\n        err,\n        NFT,\n        URI: NFT.token_uri\n      });\n    });\n  } //getMetadata()\n\n  /**\r\n   * Update NFT Object\r\n   * @param {object} NFT\r\n   * @param {object} metadata\r\n   */\n\n\n  function setMetadata(NFT, metadata) {\n    //Add Metadata\n    NFT.metadata = metadata; //Set Image\n\n    if (metadata !== null && metadata !== void 0 && metadata.image) NFT.image = resolveLink(metadata.image); //Set to State\n\n    if (metadata && !results[NFT.token_uri]) setResults({ ...results,\n      [NFT.token_uri]: NFT\n    });\n  } //setMetadata()\n\n\n  return {\n    verifyMetadata\n  };\n}; //useVerifyMetadata()\n\n_s(useVerifyMetadata, \"J6yrzvSMynLk5FR97/LwjfoRj/E=\", false, function () {\n  return [useIPFS];\n});","map":{"version":3,"sources":["C:/webgis/newfold/ethereum-boilerplate/src/hooks/useVerifyMetadata.js"],"names":["useState","useIPFS","useVerifyMetadata","resolveLink","results","setResults","verifyMetadata","NFT","metadata","getMetadata","token_uri","includes","console","log","URI","fetch","then","res","json","error","detail","warn","setTimeout","setMetadata","catch","err","image"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { useIPFS } from \"./useIPFS\";\r\n\r\n/**\r\n * This is a hook that loads the NFT metadata in case it doesn't alreay exist\r\n * If metadata is missing, the object is replaced with a reactive object that updatees when the data becomes available\r\n * The hook will retry until request is successful (with OpenSea, for now)\r\n */\r\nexport const useVerifyMetadata = () => {\r\n  const { resolveLink } = useIPFS();\r\n  const [results, setResults] = useState({});\r\n\r\n  /**\r\n   * Fet Metadata  from NFT and Cache Results\r\n   * @param {object} NFT\r\n   * @returns NFT\r\n   */\r\n  function verifyMetadata(NFT) {\r\n    //Pass Through if Metadata already present\r\n    if (NFT.metadata) return NFT;\r\n    //Get the Metadata\r\n    getMetadata(NFT);\r\n    //Return Hooked NFT Object\r\n    return results?.[NFT.token_uri] ? results?.[NFT.token_uri] : NFT;\r\n  } //verifyMetadata()\r\n\r\n  /**\r\n   * Extract Metadata from NFT,\r\n   *  Fallback: Fetch from URI\r\n   * @param {object} NFT\r\n   * @returns void\r\n   */\r\n  async function getMetadata(NFT) {\r\n    //Validate URI\r\n    if (!NFT.token_uri || !NFT.token_uri.includes(\"://\")) {\r\n      console.log(\"getMetadata() Invalid URI\", { URI: NFT.token_uri, NFT });\r\n      return;\r\n    }\r\n    //Get Metadata\r\n    fetch(NFT.token_uri)\r\n      .then((res) => res.json())\r\n      .then((metadata) => {\r\n        if (!metadata) {\r\n          //Log\r\n          console.error(\r\n            \"useVerifyMetadata.getMetadata() No Metadata found on URI:\",\r\n            { URI: NFT.token_uri, NFT },\r\n          );\r\n        }\r\n        //Handle Setbacks\r\n        else if (\r\n          metadata?.detail &&\r\n          metadata.detail.includes(\"Request was throttled\")\r\n        ) {\r\n          //Log\r\n          console.warn(\r\n            \"useVerifyMetadata.getMetadata() Bad Result for:\" +\r\n              NFT.token_uri +\r\n              \"  Will retry later\",\r\n            { results, metadata },\r\n          );\r\n          //Retry That Again after 1s\r\n          setTimeout(function () {\r\n            getMetadata(NFT);\r\n          }, 1000);\r\n        } //Handle Opensea's {detail: \"Request was throttled. Expected available in 1 second.\"}\r\n        else {\r\n          //No Errors\r\n          //Set\r\n          setMetadata(NFT, metadata);\r\n          //Log\r\n          console.log(\r\n            \"getMetadata() Late-load for NFT Metadata \" + NFT.token_uri,\r\n            { metadata },\r\n          );\r\n        } //Valid Result\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"useVerifyMetadata.getMetadata() Error Caught:\", {\r\n          err,\r\n          NFT,\r\n          URI: NFT.token_uri,\r\n        });\r\n      });\r\n  } //getMetadata()\r\n\r\n  /**\r\n   * Update NFT Object\r\n   * @param {object} NFT\r\n   * @param {object} metadata\r\n   */\r\n  function setMetadata(NFT, metadata) {\r\n    //Add Metadata\r\n    NFT.metadata = metadata;\r\n    //Set Image\r\n    if (metadata?.image) NFT.image = resolveLink(metadata.image);\r\n    //Set to State\r\n    if (metadata && !results[NFT.token_uri])\r\n      setResults({ ...results, [NFT.token_uri]: NFT });\r\n  } //setMetadata()\r\n\r\n  return { verifyMetadata };\r\n}; //useVerifyMetadata()\r\n"]},"metadata":{},"sourceType":"module"}