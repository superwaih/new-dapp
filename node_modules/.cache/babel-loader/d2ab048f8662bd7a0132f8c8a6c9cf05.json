{"ast":null,"code":"var _jsxFileName = \"C:\\\\webgis\\\\newfold\\\\ethereum-boilerplate\\\\src\\\\components\\\\ERC20Transfers\\\\ERC20Transfers.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useMoralis } from \"react-moralis\";\nimport { getEllipsisTxt } from \"../../helpers/formatters\";\nimport { getExplorer } from \"../../helpers/networks\";\nimport \"antd/dist/antd.css\";\nimport { Skeleton, Table } from \"antd\";\nimport { useERC20Transfers } from \"hooks/useERC20Transfers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ERC20Transfers() {\n  _s();\n\n  const {\n    ERC20Transfers,\n    chainId\n  } = useERC20Transfers();\n  const {\n    Moralis\n  } = useMoralis();\n  const columns = [{\n    title: \"Token\",\n    dataIndex: \"address\",\n    key: \"address\",\n    render: token => getEllipsisTxt(token, 8)\n  }, {\n    title: \"From\",\n    dataIndex: \"from_address\",\n    key: \"from_address\",\n    render: from => getEllipsisTxt(from, 8)\n  }, {\n    title: \"To\",\n    dataIndex: \"to_address\",\n    key: \"to_address\",\n    render: to => getEllipsisTxt(to, 8)\n  }, {\n    title: \"Value\",\n    dataIndex: \"value\",\n    key: \"value\",\n    render: (value, item) => parseFloat(Moralis.Units.FromWei(value, item.decimals)).toFixed(6)\n  }, {\n    title: \"Hash\",\n    dataIndex: \"transaction_hash\",\n    key: \"transaction_hash\",\n    render: hash => /*#__PURE__*/_jsxDEV(\"a\", {\n      href: `${getExplorer(chainId)}tx/${hash}`,\n      target: \"_blank\",\n      rel: \"noreferrer\",\n      children: \"View Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }];\n  let key = 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"65vw\",\n      padding: \"15px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDCB8ERC20 Transfers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n      loading: !ERC20Transfers,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        dataSource: ERC20Transfers,\n        columns: columns,\n        rowKey: record => {\n          key++;\n          return `${record.transaction_hash}-${key}`;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ERC20Transfers, \"Sla2F5EO835h6Ilx94T+PeYUzYI=\", false, function () {\n  return [useERC20Transfers, useMoralis];\n});\n\n_c = ERC20Transfers;\nexport default ERC20Transfers;\n\nvar _c;\n\n$RefreshReg$(_c, \"ERC20Transfers\");","map":{"version":3,"sources":["C:/webgis/newfold/ethereum-boilerplate/src/components/ERC20Transfers/ERC20Transfers.jsx"],"names":["React","useMoralis","getEllipsisTxt","getExplorer","Skeleton","Table","useERC20Transfers","ERC20Transfers","chainId","Moralis","columns","title","dataIndex","key","render","token","from","to","value","item","parseFloat","Units","FromWei","decimals","toFixed","hash","width","padding","record","transaction_hash"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,oBAAP;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,MAAhC;AACA,SAASC,iBAAT,QAAkC,yBAAlC;;;AAEA,SAASC,cAAT,GAA0B;AAAA;;AACxB,QAAM;AAAEA,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAA8BF,iBAAiB,EAArD;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAcR,UAAU,EAA9B;AAEA,QAAMS,OAAO,GAAG,CACd;AACEC,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,SAAS,EAAE,SAFb;AAGEC,IAAAA,GAAG,EAAE,SAHP;AAIEC,IAAAA,MAAM,EAAGC,KAAD,IAAWb,cAAc,CAACa,KAAD,EAAQ,CAAR;AAJnC,GADc,EAOd;AACEJ,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,SAAS,EAAE,cAFb;AAGEC,IAAAA,GAAG,EAAE,cAHP;AAIEC,IAAAA,MAAM,EAAGE,IAAD,IAAUd,cAAc,CAACc,IAAD,EAAO,CAAP;AAJlC,GAPc,EAad;AACEL,IAAAA,KAAK,EAAE,IADT;AAEEC,IAAAA,SAAS,EAAE,YAFb;AAGEC,IAAAA,GAAG,EAAE,YAHP;AAIEC,IAAAA,MAAM,EAAGG,EAAD,IAAQf,cAAc,CAACe,EAAD,EAAK,CAAL;AAJhC,GAbc,EAmBd;AACEN,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,SAAS,EAAE,OAFb;AAGEC,IAAAA,GAAG,EAAE,OAHP;AAIEC,IAAAA,MAAM,EAAE,CAACI,KAAD,EAAQC,IAAR,KACNC,UAAU,CAACX,OAAO,CAACY,KAAR,CAAcC,OAAd,CAAsBJ,KAAtB,EAA6BC,IAAI,CAACI,QAAlC,CAAD,CAAV,CAAwDC,OAAxD,CAAgE,CAAhE;AALJ,GAnBc,EA0Bd;AACEb,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,SAAS,EAAE,kBAFb;AAGEC,IAAAA,GAAG,EAAE,kBAHP;AAIEC,IAAAA,MAAM,EAAGW,IAAD,iBACN;AACE,MAAA,IAAI,EAAG,GAAEtB,WAAW,CAACK,OAAD,CAAU,MAAKiB,IAAK,EAD1C;AAEE,MAAA,MAAM,EAAC,QAFT;AAGE,MAAA,GAAG,EAAC,YAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALJ,GA1Bc,CAAhB;AA0CA,MAAIZ,GAAG,GAAG,CAAV;AACA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEa,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAAZ;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,OAAO,EAAE,CAACpB,cAApB;AAAA,6BACE,QAAC,KAAD;AACE,QAAA,UAAU,EAAEA,cADd;AAEE,QAAA,OAAO,EAAEG,OAFX;AAGE,QAAA,MAAM,EAAGkB,MAAD,IAAY;AAClBf,UAAAA,GAAG;AACH,iBAAQ,GAAEe,MAAM,CAACC,gBAAiB,IAAGhB,GAAI,EAAzC;AACD;AANH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA9DQN,c;UAC6BD,iB,EAChBL,U;;;KAFbM,c;AAgET,eAAeA,cAAf","sourcesContent":["import React from \"react\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport { getEllipsisTxt } from \"../../helpers/formatters\";\r\nimport { getExplorer } from \"../../helpers/networks\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Skeleton, Table } from \"antd\";\r\nimport { useERC20Transfers } from \"hooks/useERC20Transfers\";\r\n\r\nfunction ERC20Transfers() {\r\n  const { ERC20Transfers, chainId } = useERC20Transfers();\r\n  const { Moralis } = useMoralis();\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Token\",\r\n      dataIndex: \"address\",\r\n      key: \"address\",\r\n      render: (token) => getEllipsisTxt(token, 8),\r\n    },\r\n    {\r\n      title: \"From\",\r\n      dataIndex: \"from_address\",\r\n      key: \"from_address\",\r\n      render: (from) => getEllipsisTxt(from, 8),\r\n    },\r\n    {\r\n      title: \"To\",\r\n      dataIndex: \"to_address\",\r\n      key: \"to_address\",\r\n      render: (to) => getEllipsisTxt(to, 8),\r\n    },\r\n    {\r\n      title: \"Value\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (value, item) =>\r\n        parseFloat(Moralis.Units.FromWei(value, item.decimals)).toFixed(6),\r\n    },\r\n    {\r\n      title: \"Hash\",\r\n      dataIndex: \"transaction_hash\",\r\n      key: \"transaction_hash\",\r\n      render: (hash) => (\r\n        <a\r\n          href={`${getExplorer(chainId)}tx/${hash}`}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          View Transaction\r\n        </a>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  let key = 0;\r\n  return (\r\n    <div style={{ width: \"65vw\", padding: \"15px\" }}>\r\n      <h1>ðŸ’¸ERC20 Transfers</h1>\r\n      <Skeleton loading={!ERC20Transfers}>\r\n        <Table\r\n          dataSource={ERC20Transfers}\r\n          columns={columns}\r\n          rowKey={(record) => {\r\n            key++;\r\n            return `${record.transaction_hash}-${key}`;\r\n          }}\r\n        />\r\n      </Skeleton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ERC20Transfers;\r\n"]},"metadata":{},"sourceType":"module"}