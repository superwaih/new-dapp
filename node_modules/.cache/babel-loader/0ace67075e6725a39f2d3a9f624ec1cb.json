{"ast":null,"code":"var _jsxFileName = \"C:\\\\webgis\\\\newfold\\\\dapp-project\\\\src\\\\components\\\\Contract\\\\ContractResolver.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport { message } from \"antd\";\nimport Dragger from \"antd/lib/upload/Dragger\";\nimport React, { useEffect, useMemo } from \"react\";\nimport contractInfo from \"contracts/contractInfo.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ContractResolver(_ref) {\n  _s();\n\n  let {\n    contract,\n    setContract\n  } = _ref;\n  useEffect(() => {\n    /** Tries to load local contract JSON file or get\r\n     * it from browser localStorage(works only if file was uploaded previosly by drag&drop component) */\n    if (contractInfo !== null && contractInfo !== void 0 && contractInfo.name) {\n      setContract(contractInfo);\n    } else if (window.localStorage.getItem(\"contract\")) setContract(JSON.parse(window.localStorage.getItem(\"contract\")));else message.error(\"No contract found. Upload it manually or deploy the contract again\");\n  }, [contractInfo]); // Props for drag and drop uploader\n\n  const uploadProps = useMemo(() => {\n    return {\n      name: \"file\",\n      accept: \".JSON\",\n      multiple: false,\n      maxCount: 1,\n      fileList: contract !== null && contract !== void 0 && contract.contractName ? [{\n        name: `${contract === null || contract === void 0 ? void 0 : contract.contractName}.json`,\n        contract\n      }] : [],\n\n      onChange(info) {\n        const {\n          status\n        } = info.file;\n\n        if (status !== \"uploading\") {\n          console.log(info.file, info.fileList);\n        }\n\n        if (status === \"done\") {\n          message.success(`${info.file.name} file uploaded successfully.`);\n        } else if (status === \"error\") {\n          message.error(`${info.file.name} file upload failed.`);\n        }\n      },\n\n      onDrop(e) {\n        console.log(\"Dropped files\", e.dataTransfer.files);\n      },\n\n      onRemove() {\n        setContract();\n        window.localStorage.removeItem(\"contract\");\n      },\n\n      beforeUpload: file => {\n        async function fileToJSON(file) {\n          return new Promise((resolve, reject) => {\n            const fileReader = new FileReader();\n\n            fileReader.onload = event => resolve(JSON.parse(event.target.result));\n\n            fileReader.onerror = error => reject(error);\n\n            fileReader.readAsText(file);\n          });\n        }\n\n        fileToJSON(file).then(resolvedContract => {\n          window.localStorage.setItem(\"contract\", JSON.stringify(resolvedContract));\n          setContract(resolvedContract);\n        });\n        return false;\n      }\n    };\n  }, [contract]);\n  return /*#__PURE__*/_jsxDEV(Dragger, { ...uploadProps,\n    children: !contract && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ant-upload-drag-icon\",\n        children: /*#__PURE__*/_jsxDEV(InboxOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ant-upload-text\",\n        children: \"Click or drag Contract file to this area to upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ant-upload-hint\",\n        children: \"Supports JSON Contract data generated by Truffle and HardHat. JSON File should contain ABI, address and contract name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContractResolver, \"1LDfyyL7YZ5KRlVjAtiZN1ji2UA=\");\n\n_c = ContractResolver;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractResolver\");","map":{"version":3,"sources":["C:/webgis/newfold/dapp-project/src/components/Contract/ContractResolver.jsx"],"names":["InboxOutlined","message","Dragger","React","useEffect","useMemo","contractInfo","ContractResolver","contract","setContract","name","window","localStorage","getItem","JSON","parse","error","uploadProps","accept","multiple","maxCount","fileList","contractName","onChange","info","status","file","console","log","success","onDrop","e","dataTransfer","files","onRemove","removeItem","beforeUpload","fileToJSON","Promise","resolve","reject","fileReader","FileReader","onload","event","target","result","onerror","readAsText","then","resolvedContract","setItem","stringify"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { InboxOutlined } from \"@ant-design/icons\";\r\nimport { message } from \"antd\";\r\nimport Dragger from \"antd/lib/upload/Dragger\";\r\nimport React, { useEffect, useMemo } from \"react\";\r\nimport contractInfo from \"contracts/contractInfo.json\";\r\n\r\nexport default function ContractResolver({ contract, setContract }) {\r\n  useEffect(() => {\r\n    /** Tries to load local contract JSON file or get\r\n     * it from browser localStorage(works only if file was uploaded previosly by drag&drop component) */\r\n    if (contractInfo?.name) {\r\n      setContract(contractInfo);\r\n    } else if (window.localStorage.getItem(\"contract\"))\r\n      setContract(JSON.parse(window.localStorage.getItem(\"contract\")));\r\n    else\r\n      message.error(\r\n        \"No contract found. Upload it manually or deploy the contract again\",\r\n      );\r\n  }, [contractInfo]);\r\n\r\n  // Props for drag and drop uploader\r\n  const uploadProps = useMemo(() => {\r\n    return {\r\n      name: \"file\",\r\n      accept: \".JSON\",\r\n      multiple: false,\r\n      maxCount: 1,\r\n      fileList: contract?.contractName\r\n        ? [{ name: `${contract?.contractName}.json`, contract }]\r\n        : [],\r\n      onChange(info) {\r\n        const { status } = info.file;\r\n        if (status !== \"uploading\") {\r\n          console.log(info.file, info.fileList);\r\n        }\r\n        if (status === \"done\") {\r\n          message.success(`${info.file.name} file uploaded successfully.`);\r\n        } else if (status === \"error\") {\r\n          message.error(`${info.file.name} file upload failed.`);\r\n        }\r\n      },\r\n      onDrop(e) {\r\n        console.log(\"Dropped files\", e.dataTransfer.files);\r\n      },\r\n      onRemove() {\r\n        setContract();\r\n        window.localStorage.removeItem(\"contract\");\r\n      },\r\n      beforeUpload: (file) => {\r\n        async function fileToJSON(file) {\r\n          return new Promise((resolve, reject) => {\r\n            const fileReader = new FileReader();\r\n            fileReader.onload = (event) =>\r\n              resolve(JSON.parse(event.target.result));\r\n            fileReader.onerror = (error) => reject(error);\r\n            fileReader.readAsText(file);\r\n          });\r\n        }\r\n        fileToJSON(file).then((resolvedContract) => {\r\n          window.localStorage.setItem(\r\n            \"contract\",\r\n            JSON.stringify(resolvedContract),\r\n          );\r\n          setContract(resolvedContract);\r\n        });\r\n        return false;\r\n      },\r\n    };\r\n  }, [contract]);\r\n\r\n  return (\r\n    <Dragger {...uploadProps}>\r\n      {!contract && (\r\n        <>\r\n          {\" \"}\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <InboxOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">\r\n            Click or drag Contract file to this area to upload\r\n          </p>\r\n          <p className=\"ant-upload-hint\">\r\n            Supports JSON Contract data generated by Truffle and HardHat. JSON\r\n            File should contain ABI, address and contract name\r\n          </p>\r\n        </>\r\n      )}\r\n    </Dragger>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}